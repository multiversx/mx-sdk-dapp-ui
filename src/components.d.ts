/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger-connect/ledger-connect.types";
import { IEventBus } from "./utils/EventBus";
import { IProviderBase, ProviderTypeEnum } from "./types/provider.types";
import { DecodeMethodEnum } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
import { TransactionAccountType, TransactionIconInfoType, TransactionRowType } from "./components/controlled/transactions-table/transactions-table.type";
import { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { IconSizeEnumType } from "./components/common/transaction-asset-icon/transaction-asset-icon";
import { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { LocalJSX as JSX } from "@stencil/core";
import { IToastDataState, ITransactionProgressState } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { TransactionValueType } from "./components/controlled/transactions-table/transactions-table.type";
import { IEventBus as IEventBus1, unknown as IWalletConnectPanelData } from "./components.d";
export { IconDefinition } from "@fortawesome/free-solid-svg-icons";
export { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger-connect/ledger-connect.types";
export { IEventBus } from "./utils/EventBus";
export { IProviderBase, ProviderTypeEnum } from "./types/provider.types";
export { DecodeMethodEnum } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
export { TransactionAccountType, TransactionIconInfoType, TransactionRowType } from "./components/controlled/transactions-table/transactions-table.type";
export { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { IconSizeEnumType } from "./components/common/transaction-asset-icon/transaction-asset-icon";
export { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { LocalJSX as JSX } from "@stencil/core";
export { IToastDataState, ITransactionProgressState } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { TransactionValueType } from "./components/controlled/transactions-table/transactions-table.type";
export { IEventBus as IEventBus1, unknown as IWalletConnectPanelData } from "./components.d";
export namespace Components {
    interface MvxAnglesLeftIcon {
    }
    interface MvxAnglesRightIcon {
    }
    interface MvxArrowRightIcon {
        "class"?: string;
    }
    interface MvxArrowUpRightFromSquareIcon {
        "class"?: string;
    }
    interface MvxArrowUpRightIcon {
        "class"?: string;
    }
    interface MvxBackArrowIcon {
        "class"?: string;
    }
    interface MvxCheckIcon {
        "class"?: string;
    }
    interface MvxCircleExclamationIcon {
    }
    interface MvxCloseIcon {
    }
    interface MvxCopyButton {
        /**
          * @default 'copy-button'
         */
        "class"?: string;
        "copyIcon"?: IconDefinition | string;
        /**
          * @default 'copy-button-icon'
         */
        "iconClass"?: string;
        "successIcon"?: IconDefinition | string;
        "text": string;
    }
    interface MvxCustomToast {
        "toast": IComponentToast;
    }
    interface MvxDefaultTransactionIconLarge {
        "class"?: string;
    }
    interface MvxDefaultTransactionIconSmall {
        "class"?: string;
    }
    interface MvxExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "iconClass"?: string;
        "link": string;
    }
    interface MvxExtensionProviderIcon {
        "class"?: string;
        "height"?: number;
        "width"?: number;
    }
    interface MvxFaIcon {
        /**
          * @default 'fa-icon'
         */
        "class"?: string;
        "description"?: string;
        "icon": IconDefinition | string;
    }
    interface MvxFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "decimalClass"?: string;
        "isValid": boolean;
        "label"?: string;
        "labelClass"?: string;
        /**
          * @default true
         */
        "showLabel"?: boolean;
        "valueDecimal": string;
        "valueInteger": string;
    }
    interface MvxGenericToast {
        "toast": CustomToastType;
    }
    interface MvxLedgerAddresses {
        "accountScreenData": IAccountScreenData;
        "selectedIndex": number;
    }
    interface MvxLedgerConfirm {
        "confirmScreenData": IConfirmScreenData;
    }
    interface MvxLedgerConnect {
        /**
          * @default {     accountScreenData: null,     confirmScreenData: null,     connectScreenData: {},   }
         */
        "data": ILedgerConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxLedgerIcon {
        "class"?: string;
    }
    interface MvxLedgerIntro {
        "connectScreenData"?: IConnectScreenData;
        /**
          * @default false
         */
        "isAwaiting"?: boolean;
    }
    interface MvxLedgerProviderIcon {
        "class"?: string;
    }
    interface MvxMagnifyingGlassIcon {
        "class"?: string;
    }
    interface MvxMetamaskProviderIcon {
        "class"?: string;
    }
    interface MvxMultiversxLogoIcon {
        "class"?: string;
    }
    interface MvxNotificationsFeed {
        "closeWithAnimation": () => Promise<unknown>;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxPagination {
        "class"?: string;
        /**
          * @default 1
         */
        "currentPage": number;
        /**
          * @default false
         */
        "isDisabled"?: boolean;
        "totalPages": number;
    }
    interface MvxPaginationEllipsis {
        /**
          * @default false
         */
        "isActive": boolean;
    }
    interface MvxPaginationEllipsisForm {
        /**
          * @default false
         */
        "isVisible": boolean;
        "maxPageToSearchFor": number;
    }
    interface MvxPasskeyProviderIcon {
        "class"?: string;
    }
    interface MvxPencilIcon {
        "class"?: string;
    }
    interface MvxPendingTransactionsPanel {
        "closeWithAnimation": () => Promise<unknown>;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxPreloader {
        "class"?: string;
    }
    interface MvxProviderIdleScreen {
        /**
          * @default ''
         */
        "introText": string;
        /**
          * @default 'Requesting Connection'
         */
        "introTitle": string;
        /**
          * @default null
         */
        "provider": IProviderBase | null;
    }
    interface MvxSidePanel {
        "hasBackButton"?: boolean;
        /**
          * @default false
         */
        "isOpen": boolean;
        "panelClassName"?: string;
        "panelTitle": string;
        /**
          * @default true
         */
        "showHeader"?: boolean;
    }
    interface MvxSidePanelHeader {
        /**
          * @default true
         */
        "hasLeftButton"?: boolean;
        /**
          * @default true
         */
        "hasRightButton"?: boolean;
        "panelClassName"?: string;
        "panelTitle": string;
    }
    interface MvxSignTransactionsAdvanced {
        "data": string;
        "highlight"?: string;
    }
    interface MvxSignTransactionsAdvancedData {
        "data": string;
        "highlight"?: string;
    }
    interface MvxSignTransactionsAdvancedDataDecode {
        /**
          * @default DecodeMethodEnum.decimal
         */
        "currentDecodeMethod": DecodeMethodEnum;
        /**
          * @default false
         */
        "isToggled": boolean;
    }
    interface MvxSignTransactionsFooter {
    }
    interface MvxSignTransactionsHeader {
    }
    interface MvxSignTransactionsOverview {
        "action": string;
        "amount": string;
        "identifier": string;
        "interactor": string;
        "interactorIconUrl": string;
        /**
          * @default false
         */
        "isApp": boolean;
        /**
          * @default '~$0.00078'
         */
        "networkFee": string;
        "tokenIconUrl": string;
        "usdValue": string;
    }
    interface MvxSignTransactionsPanel {
        "closeWithAnimation": () => Promise<unknown>;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxSimpleToast {
        "toast": ISimpleToast;
    }
    interface MvxSingleAngleDownIcon {
        "class"?: string;
    }
    interface MvxSingleAngleLeftIcon {
        "class"?: string;
    }
    interface MvxSingleAngleRightIcon {
        "class"?: string;
    }
    interface MvxSpinnerIcon {
        "class"?: string;
    }
    interface MvxToastList {
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxTooltip {
        "class"?: string;
        /**
          * @default 'top'
         */
        "position": 'top' | 'bottom';
        "trigger": HTMLElement;
        /**
          * @default false
         */
        "triggerOnClick"?: boolean;
    }
    interface MvxTransactionAccount {
        "account": TransactionAccountType;
        "class"?: string;
        "dataTestId"?: string;
        "scope": 'receiver' | 'sender';
        /**
          * @default false
         */
        "showLockedAccounts": boolean;
    }
    interface MvxTransactionAccountName {
        "address": string;
        "class"?: string;
        "dataTestId"?: string;
        "description": string;
        "name"?: string;
    }
    interface MvxTransactionAge {
        "age": string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface MvxTransactionAssetIcon {
        "iconSize": IconSizeEnumType;
        "transaction": ITransactionListItem;
    }
    interface MvxTransactionDirectionBadge {
        "class"?: string;
        "direction": string;
    }
    interface MvxTransactionHash {
        "class"?: string;
        "transaction": TransactionRowType;
    }
    interface MvxTransactionIcon {
        "class"?: string;
        "iconInfo": TransactionIconInfoType;
    }
    interface MvxTransactionListItem {
        "transaction": ITransactionListItem1;
    }
    interface MvxTransactionMethod {
        "actionDescription": string;
        "class"?: string;
        "method": string;
    }
    interface MvxTransactionShards {
        "class"?: string;
        "transaction": TransactionRowType;
    }
    interface MvxTransactionToast {
        "fullWidth"?: boolean;
        /**
          * @default ''
         */
        "processedTransactionsStatus": string | JSX.Element;
        "toastDataState": IToastDataState;
        /**
          * @default ''
         */
        "toastId": string;
        "transactionProgressState"?: ITransactionProgressState;
        /**
          * @default []
         */
        "transactions": ITransactionListItem[];
        "wrapperClass": string;
    }
    interface MvxTransactionToastContent {
        "fullWidth"?: boolean;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState": IToastDataState;
        "transactions": ITransactionListItem[];
    }
    interface MvxTransactionToastDetails {
        /**
          * @default 5
         */
        "maxShownTransactions": number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass": string;
        "transactions"?: ITransactionListItem[];
    }
    interface MvxTransactionToastDetailsBody {
        "hash": string;
        "index": string;
        "link": string;
        "status"?: string;
        /**
          * @default 'transaction-details-list-item'
         */
        "transactionClass"?: string;
    }
    interface MvxTransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface MvxTransactionValue {
        "class"?: string;
        "value": TransactionValueType;
    }
    interface MvxTransactionsTable {
        "class"?: string;
        "transactions": TransactionRowType[];
    }
    interface MvxTriangularWarningIcon {
    }
    interface MvxTrim {
        "class"?: string;
        "dataTestId"?: string;
        "text": string;
    }
    interface MvxUnlockButton {
        "class"?: string;
        "icon"?: HTMLElement;
        "iconUrl": string;
        "label": string;
        "type"?: IProviderBase['type'];
    }
    interface MvxUnlockPanel {
        "closeWithAnimation": () => Promise<unknown>;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxUnlockPanelFooter {
        "walletAddress": string;
    }
    interface MvxUnlockPanelGroup {
        "class"?: string;
        /**
          * @default []
         */
        "providers": IProviderBase[];
    }
    interface MvxUnlockProviderButton {
        "class"?: string;
        "provider": IProviderBase<ProviderTypeEnum>;
    }
    interface MvxWalletConnect {
        /**
          * @default { wcURI: '' }
         */
        "data": IWalletConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
        /**
          * @default ''
         */
        "qrCodeSvg": string;
    }
    interface MvxWalletConnectAppGalleryIcon {
        "class"?: string;
    }
    interface MvxWalletConnectAppStoreIcon {
        "class"?: string;
    }
    interface MvxWalletConnectDownload {
        "class"?: string;
    }
    interface MvxWalletConnectGooglePlayIcon {
        "class"?: string;
    }
    interface MvxWalletConnectScan {
        "class"?: string;
        /**
          * @default ''
         */
        "qrCodeSvg": string;
        /**
          * @default ''
         */
        "walletConnectDeepLink"?: string;
    }
    interface MvxWalletProviderIcon {
        "class"?: string;
    }
    interface MvxXaliasProviderIcon {
    }
    interface MvxXportalDownloadQrIcon {
        /**
          * @default ''
         */
        "class"?: string;
    }
    interface MvxXportalQrCodePreloader {
        "class"?: string;
    }
}
export interface MvxCustomToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxCustomToastElement;
}
export interface MvxGenericToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxGenericToastElement;
}
export interface MvxLedgerAddressesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxLedgerAddressesElement;
}
export interface MvxLedgerIntroCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxLedgerIntroElement;
}
export interface MvxPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxPaginationElement;
}
export interface MvxPaginationEllipsisFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxPaginationEllipsisFormElement;
}
export interface MvxProviderIdleScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxProviderIdleScreenElement;
}
export interface MvxSidePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxSidePanelElement;
}
export interface MvxSidePanelHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxSidePanelHeaderElement;
}
export interface MvxSimpleToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxSimpleToastElement;
}
export interface MvxTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxTooltipElement;
}
export interface MvxTransactionToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxTransactionToastElement;
}
export interface MvxTransactionToastContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxTransactionToastContentElement;
}
export interface MvxUnlockPanelGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxUnlockPanelGroupElement;
}
export interface MvxWalletConnectScanCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxWalletConnectScanElement;
}
declare global {
    interface HTMLMvxAnglesLeftIconElement extends Components.MvxAnglesLeftIcon, HTMLStencilElement {
    }
    var HTMLMvxAnglesLeftIconElement: {
        prototype: HTMLMvxAnglesLeftIconElement;
        new (): HTMLMvxAnglesLeftIconElement;
    };
    interface HTMLMvxAnglesRightIconElement extends Components.MvxAnglesRightIcon, HTMLStencilElement {
    }
    var HTMLMvxAnglesRightIconElement: {
        prototype: HTMLMvxAnglesRightIconElement;
        new (): HTMLMvxAnglesRightIconElement;
    };
    interface HTMLMvxArrowRightIconElement extends Components.MvxArrowRightIcon, HTMLStencilElement {
    }
    var HTMLMvxArrowRightIconElement: {
        prototype: HTMLMvxArrowRightIconElement;
        new (): HTMLMvxArrowRightIconElement;
    };
    interface HTMLMvxArrowUpRightFromSquareIconElement extends Components.MvxArrowUpRightFromSquareIcon, HTMLStencilElement {
    }
    var HTMLMvxArrowUpRightFromSquareIconElement: {
        prototype: HTMLMvxArrowUpRightFromSquareIconElement;
        new (): HTMLMvxArrowUpRightFromSquareIconElement;
    };
    interface HTMLMvxArrowUpRightIconElement extends Components.MvxArrowUpRightIcon, HTMLStencilElement {
    }
    var HTMLMvxArrowUpRightIconElement: {
        prototype: HTMLMvxArrowUpRightIconElement;
        new (): HTMLMvxArrowUpRightIconElement;
    };
    interface HTMLMvxBackArrowIconElement extends Components.MvxBackArrowIcon, HTMLStencilElement {
    }
    var HTMLMvxBackArrowIconElement: {
        prototype: HTMLMvxBackArrowIconElement;
        new (): HTMLMvxBackArrowIconElement;
    };
    interface HTMLMvxCheckIconElement extends Components.MvxCheckIcon, HTMLStencilElement {
    }
    var HTMLMvxCheckIconElement: {
        prototype: HTMLMvxCheckIconElement;
        new (): HTMLMvxCheckIconElement;
    };
    interface HTMLMvxCircleExclamationIconElement extends Components.MvxCircleExclamationIcon, HTMLStencilElement {
    }
    var HTMLMvxCircleExclamationIconElement: {
        prototype: HTMLMvxCircleExclamationIconElement;
        new (): HTMLMvxCircleExclamationIconElement;
    };
    interface HTMLMvxCloseIconElement extends Components.MvxCloseIcon, HTMLStencilElement {
    }
    var HTMLMvxCloseIconElement: {
        prototype: HTMLMvxCloseIconElement;
        new (): HTMLMvxCloseIconElement;
    };
    interface HTMLMvxCopyButtonElement extends Components.MvxCopyButton, HTMLStencilElement {
    }
    var HTMLMvxCopyButtonElement: {
        prototype: HTMLMvxCopyButtonElement;
        new (): HTMLMvxCopyButtonElement;
    };
    interface HTMLMvxCustomToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLMvxCustomToastElement extends Components.MvxCustomToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxCustomToastElementEventMap>(type: K, listener: (this: HTMLMvxCustomToastElement, ev: MvxCustomToastCustomEvent<HTMLMvxCustomToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxCustomToastElementEventMap>(type: K, listener: (this: HTMLMvxCustomToastElement, ev: MvxCustomToastCustomEvent<HTMLMvxCustomToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxCustomToastElement: {
        prototype: HTMLMvxCustomToastElement;
        new (): HTMLMvxCustomToastElement;
    };
    interface HTMLMvxDefaultTransactionIconLargeElement extends Components.MvxDefaultTransactionIconLarge, HTMLStencilElement {
    }
    var HTMLMvxDefaultTransactionIconLargeElement: {
        prototype: HTMLMvxDefaultTransactionIconLargeElement;
        new (): HTMLMvxDefaultTransactionIconLargeElement;
    };
    interface HTMLMvxDefaultTransactionIconSmallElement extends Components.MvxDefaultTransactionIconSmall, HTMLStencilElement {
    }
    var HTMLMvxDefaultTransactionIconSmallElement: {
        prototype: HTMLMvxDefaultTransactionIconSmallElement;
        new (): HTMLMvxDefaultTransactionIconSmallElement;
    };
    interface HTMLMvxExplorerLinkElement extends Components.MvxExplorerLink, HTMLStencilElement {
    }
    var HTMLMvxExplorerLinkElement: {
        prototype: HTMLMvxExplorerLinkElement;
        new (): HTMLMvxExplorerLinkElement;
    };
    interface HTMLMvxExtensionProviderIconElement extends Components.MvxExtensionProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxExtensionProviderIconElement: {
        prototype: HTMLMvxExtensionProviderIconElement;
        new (): HTMLMvxExtensionProviderIconElement;
    };
    interface HTMLMvxFaIconElement extends Components.MvxFaIcon, HTMLStencilElement {
    }
    var HTMLMvxFaIconElement: {
        prototype: HTMLMvxFaIconElement;
        new (): HTMLMvxFaIconElement;
    };
    interface HTMLMvxFormatAmountElement extends Components.MvxFormatAmount, HTMLStencilElement {
    }
    var HTMLMvxFormatAmountElement: {
        prototype: HTMLMvxFormatAmountElement;
        new (): HTMLMvxFormatAmountElement;
    };
    interface HTMLMvxGenericToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLMvxGenericToastElement extends Components.MvxGenericToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxGenericToastElementEventMap>(type: K, listener: (this: HTMLMvxGenericToastElement, ev: MvxGenericToastCustomEvent<HTMLMvxGenericToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxGenericToastElementEventMap>(type: K, listener: (this: HTMLMvxGenericToastElement, ev: MvxGenericToastCustomEvent<HTMLMvxGenericToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxGenericToastElement: {
        prototype: HTMLMvxGenericToastElement;
        new (): HTMLMvxGenericToastElement;
    };
    interface HTMLMvxLedgerAddressesElementEventMap {
        "accessWallet": any;
        "selectAccount": any;
        "pageChange": number;
    }
    interface HTMLMvxLedgerAddressesElement extends Components.MvxLedgerAddresses, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxLedgerAddressesElementEventMap>(type: K, listener: (this: HTMLMvxLedgerAddressesElement, ev: MvxLedgerAddressesCustomEvent<HTMLMvxLedgerAddressesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxLedgerAddressesElementEventMap>(type: K, listener: (this: HTMLMvxLedgerAddressesElement, ev: MvxLedgerAddressesCustomEvent<HTMLMvxLedgerAddressesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxLedgerAddressesElement: {
        prototype: HTMLMvxLedgerAddressesElement;
        new (): HTMLMvxLedgerAddressesElement;
    };
    interface HTMLMvxLedgerConfirmElement extends Components.MvxLedgerConfirm, HTMLStencilElement {
    }
    var HTMLMvxLedgerConfirmElement: {
        prototype: HTMLMvxLedgerConfirmElement;
        new (): HTMLMvxLedgerConfirmElement;
    };
    interface HTMLMvxLedgerConnectElement extends Components.MvxLedgerConnect, HTMLStencilElement {
    }
    var HTMLMvxLedgerConnectElement: {
        prototype: HTMLMvxLedgerConnectElement;
        new (): HTMLMvxLedgerConnectElement;
    };
    interface HTMLMvxLedgerIconElement extends Components.MvxLedgerIcon, HTMLStencilElement {
    }
    var HTMLMvxLedgerIconElement: {
        prototype: HTMLMvxLedgerIconElement;
        new (): HTMLMvxLedgerIconElement;
    };
    interface HTMLMvxLedgerIntroElementEventMap {
        "connect": any;
    }
    interface HTMLMvxLedgerIntroElement extends Components.MvxLedgerIntro, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxLedgerIntroElementEventMap>(type: K, listener: (this: HTMLMvxLedgerIntroElement, ev: MvxLedgerIntroCustomEvent<HTMLMvxLedgerIntroElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxLedgerIntroElementEventMap>(type: K, listener: (this: HTMLMvxLedgerIntroElement, ev: MvxLedgerIntroCustomEvent<HTMLMvxLedgerIntroElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxLedgerIntroElement: {
        prototype: HTMLMvxLedgerIntroElement;
        new (): HTMLMvxLedgerIntroElement;
    };
    interface HTMLMvxLedgerProviderIconElement extends Components.MvxLedgerProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxLedgerProviderIconElement: {
        prototype: HTMLMvxLedgerProviderIconElement;
        new (): HTMLMvxLedgerProviderIconElement;
    };
    interface HTMLMvxMagnifyingGlassIconElement extends Components.MvxMagnifyingGlassIcon, HTMLStencilElement {
    }
    var HTMLMvxMagnifyingGlassIconElement: {
        prototype: HTMLMvxMagnifyingGlassIconElement;
        new (): HTMLMvxMagnifyingGlassIconElement;
    };
    interface HTMLMvxMetamaskProviderIconElement extends Components.MvxMetamaskProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxMetamaskProviderIconElement: {
        prototype: HTMLMvxMetamaskProviderIconElement;
        new (): HTMLMvxMetamaskProviderIconElement;
    };
    interface HTMLMvxMultiversxLogoIconElement extends Components.MvxMultiversxLogoIcon, HTMLStencilElement {
    }
    var HTMLMvxMultiversxLogoIconElement: {
        prototype: HTMLMvxMultiversxLogoIconElement;
        new (): HTMLMvxMultiversxLogoIconElement;
    };
    interface HTMLMvxNotificationsFeedElement extends Components.MvxNotificationsFeed, HTMLStencilElement {
    }
    var HTMLMvxNotificationsFeedElement: {
        prototype: HTMLMvxNotificationsFeedElement;
        new (): HTMLMvxNotificationsFeedElement;
    };
    interface HTMLMvxPaginationElementEventMap {
        "pageChange": number;
    }
    interface HTMLMvxPaginationElement extends Components.MvxPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxPaginationElementEventMap>(type: K, listener: (this: HTMLMvxPaginationElement, ev: MvxPaginationCustomEvent<HTMLMvxPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxPaginationElementEventMap>(type: K, listener: (this: HTMLMvxPaginationElement, ev: MvxPaginationCustomEvent<HTMLMvxPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxPaginationElement: {
        prototype: HTMLMvxPaginationElement;
        new (): HTMLMvxPaginationElement;
    };
    interface HTMLMvxPaginationEllipsisElement extends Components.MvxPaginationEllipsis, HTMLStencilElement {
    }
    var HTMLMvxPaginationEllipsisElement: {
        prototype: HTMLMvxPaginationEllipsisElement;
        new (): HTMLMvxPaginationEllipsisElement;
    };
    interface HTMLMvxPaginationEllipsisFormElementEventMap {
        "search": number;
    }
    interface HTMLMvxPaginationEllipsisFormElement extends Components.MvxPaginationEllipsisForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxPaginationEllipsisFormElementEventMap>(type: K, listener: (this: HTMLMvxPaginationEllipsisFormElement, ev: MvxPaginationEllipsisFormCustomEvent<HTMLMvxPaginationEllipsisFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxPaginationEllipsisFormElementEventMap>(type: K, listener: (this: HTMLMvxPaginationEllipsisFormElement, ev: MvxPaginationEllipsisFormCustomEvent<HTMLMvxPaginationEllipsisFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxPaginationEllipsisFormElement: {
        prototype: HTMLMvxPaginationEllipsisFormElement;
        new (): HTMLMvxPaginationEllipsisFormElement;
    };
    interface HTMLMvxPasskeyProviderIconElement extends Components.MvxPasskeyProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxPasskeyProviderIconElement: {
        prototype: HTMLMvxPasskeyProviderIconElement;
        new (): HTMLMvxPasskeyProviderIconElement;
    };
    interface HTMLMvxPencilIconElement extends Components.MvxPencilIcon, HTMLStencilElement {
    }
    var HTMLMvxPencilIconElement: {
        prototype: HTMLMvxPencilIconElement;
        new (): HTMLMvxPencilIconElement;
    };
    interface HTMLMvxPendingTransactionsPanelElement extends Components.MvxPendingTransactionsPanel, HTMLStencilElement {
    }
    var HTMLMvxPendingTransactionsPanelElement: {
        prototype: HTMLMvxPendingTransactionsPanelElement;
        new (): HTMLMvxPendingTransactionsPanelElement;
    };
    interface HTMLMvxPreloaderElement extends Components.MvxPreloader, HTMLStencilElement {
    }
    var HTMLMvxPreloaderElement: {
        prototype: HTMLMvxPreloaderElement;
        new (): HTMLMvxPreloaderElement;
    };
    interface HTMLMvxProviderIdleScreenElementEventMap {
        "close": any;
        "access": any;
    }
    interface HTMLMvxProviderIdleScreenElement extends Components.MvxProviderIdleScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxProviderIdleScreenElementEventMap>(type: K, listener: (this: HTMLMvxProviderIdleScreenElement, ev: MvxProviderIdleScreenCustomEvent<HTMLMvxProviderIdleScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxProviderIdleScreenElementEventMap>(type: K, listener: (this: HTMLMvxProviderIdleScreenElement, ev: MvxProviderIdleScreenCustomEvent<HTMLMvxProviderIdleScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxProviderIdleScreenElement: {
        prototype: HTMLMvxProviderIdleScreenElement;
        new (): HTMLMvxProviderIdleScreenElement;
    };
    interface HTMLMvxSidePanelElementEventMap {
        "close": void;
        "back": void;
    }
    interface HTMLMvxSidePanelElement extends Components.MvxSidePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxSidePanelElementEventMap>(type: K, listener: (this: HTMLMvxSidePanelElement, ev: MvxSidePanelCustomEvent<HTMLMvxSidePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxSidePanelElementEventMap>(type: K, listener: (this: HTMLMvxSidePanelElement, ev: MvxSidePanelCustomEvent<HTMLMvxSidePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxSidePanelElement: {
        prototype: HTMLMvxSidePanelElement;
        new (): HTMLMvxSidePanelElement;
    };
    interface HTMLMvxSidePanelHeaderElementEventMap {
        "rightButtonClick": any;
        "leftButtonClick": any;
    }
    interface HTMLMvxSidePanelHeaderElement extends Components.MvxSidePanelHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxSidePanelHeaderElementEventMap>(type: K, listener: (this: HTMLMvxSidePanelHeaderElement, ev: MvxSidePanelHeaderCustomEvent<HTMLMvxSidePanelHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxSidePanelHeaderElementEventMap>(type: K, listener: (this: HTMLMvxSidePanelHeaderElement, ev: MvxSidePanelHeaderCustomEvent<HTMLMvxSidePanelHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxSidePanelHeaderElement: {
        prototype: HTMLMvxSidePanelHeaderElement;
        new (): HTMLMvxSidePanelHeaderElement;
    };
    interface HTMLMvxSignTransactionsAdvancedElement extends Components.MvxSignTransactionsAdvanced, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionsAdvancedElement: {
        prototype: HTMLMvxSignTransactionsAdvancedElement;
        new (): HTMLMvxSignTransactionsAdvancedElement;
    };
    interface HTMLMvxSignTransactionsAdvancedDataElement extends Components.MvxSignTransactionsAdvancedData, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionsAdvancedDataElement: {
        prototype: HTMLMvxSignTransactionsAdvancedDataElement;
        new (): HTMLMvxSignTransactionsAdvancedDataElement;
    };
    interface HTMLMvxSignTransactionsAdvancedDataDecodeElement extends Components.MvxSignTransactionsAdvancedDataDecode, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionsAdvancedDataDecodeElement: {
        prototype: HTMLMvxSignTransactionsAdvancedDataDecodeElement;
        new (): HTMLMvxSignTransactionsAdvancedDataDecodeElement;
    };
    interface HTMLMvxSignTransactionsFooterElement extends Components.MvxSignTransactionsFooter, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionsFooterElement: {
        prototype: HTMLMvxSignTransactionsFooterElement;
        new (): HTMLMvxSignTransactionsFooterElement;
    };
    interface HTMLMvxSignTransactionsHeaderElement extends Components.MvxSignTransactionsHeader, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionsHeaderElement: {
        prototype: HTMLMvxSignTransactionsHeaderElement;
        new (): HTMLMvxSignTransactionsHeaderElement;
    };
    interface HTMLMvxSignTransactionsOverviewElement extends Components.MvxSignTransactionsOverview, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionsOverviewElement: {
        prototype: HTMLMvxSignTransactionsOverviewElement;
        new (): HTMLMvxSignTransactionsOverviewElement;
    };
    interface HTMLMvxSignTransactionsPanelElement extends Components.MvxSignTransactionsPanel, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionsPanelElement: {
        prototype: HTMLMvxSignTransactionsPanelElement;
        new (): HTMLMvxSignTransactionsPanelElement;
    };
    interface HTMLMvxSimpleToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLMvxSimpleToastElement extends Components.MvxSimpleToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxSimpleToastElementEventMap>(type: K, listener: (this: HTMLMvxSimpleToastElement, ev: MvxSimpleToastCustomEvent<HTMLMvxSimpleToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxSimpleToastElementEventMap>(type: K, listener: (this: HTMLMvxSimpleToastElement, ev: MvxSimpleToastCustomEvent<HTMLMvxSimpleToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxSimpleToastElement: {
        prototype: HTMLMvxSimpleToastElement;
        new (): HTMLMvxSimpleToastElement;
    };
    interface HTMLMvxSingleAngleDownIconElement extends Components.MvxSingleAngleDownIcon, HTMLStencilElement {
    }
    var HTMLMvxSingleAngleDownIconElement: {
        prototype: HTMLMvxSingleAngleDownIconElement;
        new (): HTMLMvxSingleAngleDownIconElement;
    };
    interface HTMLMvxSingleAngleLeftIconElement extends Components.MvxSingleAngleLeftIcon, HTMLStencilElement {
    }
    var HTMLMvxSingleAngleLeftIconElement: {
        prototype: HTMLMvxSingleAngleLeftIconElement;
        new (): HTMLMvxSingleAngleLeftIconElement;
    };
    interface HTMLMvxSingleAngleRightIconElement extends Components.MvxSingleAngleRightIcon, HTMLStencilElement {
    }
    var HTMLMvxSingleAngleRightIconElement: {
        prototype: HTMLMvxSingleAngleRightIconElement;
        new (): HTMLMvxSingleAngleRightIconElement;
    };
    interface HTMLMvxSpinnerIconElement extends Components.MvxSpinnerIcon, HTMLStencilElement {
    }
    var HTMLMvxSpinnerIconElement: {
        prototype: HTMLMvxSpinnerIconElement;
        new (): HTMLMvxSpinnerIconElement;
    };
    interface HTMLMvxToastListElement extends Components.MvxToastList, HTMLStencilElement {
    }
    var HTMLMvxToastListElement: {
        prototype: HTMLMvxToastListElement;
        new (): HTMLMvxToastListElement;
    };
    interface HTMLMvxTooltipElementEventMap {
        "triggerRender": boolean;
    }
    interface HTMLMvxTooltipElement extends Components.MvxTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxTooltipElementEventMap>(type: K, listener: (this: HTMLMvxTooltipElement, ev: MvxTooltipCustomEvent<HTMLMvxTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxTooltipElementEventMap>(type: K, listener: (this: HTMLMvxTooltipElement, ev: MvxTooltipCustomEvent<HTMLMvxTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxTooltipElement: {
        prototype: HTMLMvxTooltipElement;
        new (): HTMLMvxTooltipElement;
    };
    interface HTMLMvxTransactionAccountElement extends Components.MvxTransactionAccount, HTMLStencilElement {
    }
    var HTMLMvxTransactionAccountElement: {
        prototype: HTMLMvxTransactionAccountElement;
        new (): HTMLMvxTransactionAccountElement;
    };
    interface HTMLMvxTransactionAccountNameElement extends Components.MvxTransactionAccountName, HTMLStencilElement {
    }
    var HTMLMvxTransactionAccountNameElement: {
        prototype: HTMLMvxTransactionAccountNameElement;
        new (): HTMLMvxTransactionAccountNameElement;
    };
    interface HTMLMvxTransactionAgeElement extends Components.MvxTransactionAge, HTMLStencilElement {
    }
    var HTMLMvxTransactionAgeElement: {
        prototype: HTMLMvxTransactionAgeElement;
        new (): HTMLMvxTransactionAgeElement;
    };
    interface HTMLMvxTransactionAssetIconElement extends Components.MvxTransactionAssetIcon, HTMLStencilElement {
    }
    var HTMLMvxTransactionAssetIconElement: {
        prototype: HTMLMvxTransactionAssetIconElement;
        new (): HTMLMvxTransactionAssetIconElement;
    };
    interface HTMLMvxTransactionDirectionBadgeElement extends Components.MvxTransactionDirectionBadge, HTMLStencilElement {
    }
    var HTMLMvxTransactionDirectionBadgeElement: {
        prototype: HTMLMvxTransactionDirectionBadgeElement;
        new (): HTMLMvxTransactionDirectionBadgeElement;
    };
    interface HTMLMvxTransactionHashElement extends Components.MvxTransactionHash, HTMLStencilElement {
    }
    var HTMLMvxTransactionHashElement: {
        prototype: HTMLMvxTransactionHashElement;
        new (): HTMLMvxTransactionHashElement;
    };
    interface HTMLMvxTransactionIconElement extends Components.MvxTransactionIcon, HTMLStencilElement {
    }
    var HTMLMvxTransactionIconElement: {
        prototype: HTMLMvxTransactionIconElement;
        new (): HTMLMvxTransactionIconElement;
    };
    interface HTMLMvxTransactionListItemElement extends Components.MvxTransactionListItem, HTMLStencilElement {
    }
    var HTMLMvxTransactionListItemElement: {
        prototype: HTMLMvxTransactionListItemElement;
        new (): HTMLMvxTransactionListItemElement;
    };
    interface HTMLMvxTransactionMethodElement extends Components.MvxTransactionMethod, HTMLStencilElement {
    }
    var HTMLMvxTransactionMethodElement: {
        prototype: HTMLMvxTransactionMethodElement;
        new (): HTMLMvxTransactionMethodElement;
    };
    interface HTMLMvxTransactionShardsElement extends Components.MvxTransactionShards, HTMLStencilElement {
    }
    var HTMLMvxTransactionShardsElement: {
        prototype: HTMLMvxTransactionShardsElement;
        new (): HTMLMvxTransactionShardsElement;
    };
    interface HTMLMvxTransactionToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLMvxTransactionToastElement extends Components.MvxTransactionToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxTransactionToastElementEventMap>(type: K, listener: (this: HTMLMvxTransactionToastElement, ev: MvxTransactionToastCustomEvent<HTMLMvxTransactionToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxTransactionToastElementEventMap>(type: K, listener: (this: HTMLMvxTransactionToastElement, ev: MvxTransactionToastCustomEvent<HTMLMvxTransactionToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxTransactionToastElement: {
        prototype: HTMLMvxTransactionToastElement;
        new (): HTMLMvxTransactionToastElement;
    };
    interface HTMLMvxTransactionToastContentElementEventMap {
        "deleteToast": void;
    }
    interface HTMLMvxTransactionToastContentElement extends Components.MvxTransactionToastContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLMvxTransactionToastContentElement, ev: MvxTransactionToastContentCustomEvent<HTMLMvxTransactionToastContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLMvxTransactionToastContentElement, ev: MvxTransactionToastContentCustomEvent<HTMLMvxTransactionToastContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxTransactionToastContentElement: {
        prototype: HTMLMvxTransactionToastContentElement;
        new (): HTMLMvxTransactionToastContentElement;
    };
    interface HTMLMvxTransactionToastDetailsElement extends Components.MvxTransactionToastDetails, HTMLStencilElement {
    }
    var HTMLMvxTransactionToastDetailsElement: {
        prototype: HTMLMvxTransactionToastDetailsElement;
        new (): HTMLMvxTransactionToastDetailsElement;
    };
    interface HTMLMvxTransactionToastDetailsBodyElement extends Components.MvxTransactionToastDetailsBody, HTMLStencilElement {
    }
    var HTMLMvxTransactionToastDetailsBodyElement: {
        prototype: HTMLMvxTransactionToastDetailsBodyElement;
        new (): HTMLMvxTransactionToastDetailsBodyElement;
    };
    interface HTMLMvxTransactionToastProgressElement extends Components.MvxTransactionToastProgress, HTMLStencilElement {
    }
    var HTMLMvxTransactionToastProgressElement: {
        prototype: HTMLMvxTransactionToastProgressElement;
        new (): HTMLMvxTransactionToastProgressElement;
    };
    interface HTMLMvxTransactionValueElement extends Components.MvxTransactionValue, HTMLStencilElement {
    }
    var HTMLMvxTransactionValueElement: {
        prototype: HTMLMvxTransactionValueElement;
        new (): HTMLMvxTransactionValueElement;
    };
    interface HTMLMvxTransactionsTableElement extends Components.MvxTransactionsTable, HTMLStencilElement {
    }
    var HTMLMvxTransactionsTableElement: {
        prototype: HTMLMvxTransactionsTableElement;
        new (): HTMLMvxTransactionsTableElement;
    };
    interface HTMLMvxTriangularWarningIconElement extends Components.MvxTriangularWarningIcon, HTMLStencilElement {
    }
    var HTMLMvxTriangularWarningIconElement: {
        prototype: HTMLMvxTriangularWarningIconElement;
        new (): HTMLMvxTriangularWarningIconElement;
    };
    interface HTMLMvxTrimElement extends Components.MvxTrim, HTMLStencilElement {
    }
    var HTMLMvxTrimElement: {
        prototype: HTMLMvxTrimElement;
        new (): HTMLMvxTrimElement;
    };
    interface HTMLMvxUnlockButtonElement extends Components.MvxUnlockButton, HTMLStencilElement {
    }
    var HTMLMvxUnlockButtonElement: {
        prototype: HTMLMvxUnlockButtonElement;
        new (): HTMLMvxUnlockButtonElement;
    };
    interface HTMLMvxUnlockPanelElement extends Components.MvxUnlockPanel, HTMLStencilElement {
    }
    var HTMLMvxUnlockPanelElement: {
        prototype: HTMLMvxUnlockPanelElement;
        new (): HTMLMvxUnlockPanelElement;
    };
    interface HTMLMvxUnlockPanelFooterElement extends Components.MvxUnlockPanelFooter, HTMLStencilElement {
    }
    var HTMLMvxUnlockPanelFooterElement: {
        prototype: HTMLMvxUnlockPanelFooterElement;
        new (): HTMLMvxUnlockPanelFooterElement;
    };
    interface HTMLMvxUnlockPanelGroupElementEventMap {
        "login": IProviderBase;
    }
    interface HTMLMvxUnlockPanelGroupElement extends Components.MvxUnlockPanelGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxUnlockPanelGroupElementEventMap>(type: K, listener: (this: HTMLMvxUnlockPanelGroupElement, ev: MvxUnlockPanelGroupCustomEvent<HTMLMvxUnlockPanelGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxUnlockPanelGroupElementEventMap>(type: K, listener: (this: HTMLMvxUnlockPanelGroupElement, ev: MvxUnlockPanelGroupCustomEvent<HTMLMvxUnlockPanelGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxUnlockPanelGroupElement: {
        prototype: HTMLMvxUnlockPanelGroupElement;
        new (): HTMLMvxUnlockPanelGroupElement;
    };
    interface HTMLMvxUnlockProviderButtonElement extends Components.MvxUnlockProviderButton, HTMLStencilElement {
    }
    var HTMLMvxUnlockProviderButtonElement: {
        prototype: HTMLMvxUnlockProviderButtonElement;
        new (): HTMLMvxUnlockProviderButtonElement;
    };
    interface HTMLMvxWalletConnectElement extends Components.MvxWalletConnect, HTMLStencilElement {
    }
    var HTMLMvxWalletConnectElement: {
        prototype: HTMLMvxWalletConnectElement;
        new (): HTMLMvxWalletConnectElement;
    };
    interface HTMLMvxWalletConnectAppGalleryIconElement extends Components.MvxWalletConnectAppGalleryIcon, HTMLStencilElement {
    }
    var HTMLMvxWalletConnectAppGalleryIconElement: {
        prototype: HTMLMvxWalletConnectAppGalleryIconElement;
        new (): HTMLMvxWalletConnectAppGalleryIconElement;
    };
    interface HTMLMvxWalletConnectAppStoreIconElement extends Components.MvxWalletConnectAppStoreIcon, HTMLStencilElement {
    }
    var HTMLMvxWalletConnectAppStoreIconElement: {
        prototype: HTMLMvxWalletConnectAppStoreIconElement;
        new (): HTMLMvxWalletConnectAppStoreIconElement;
    };
    interface HTMLMvxWalletConnectDownloadElement extends Components.MvxWalletConnectDownload, HTMLStencilElement {
    }
    var HTMLMvxWalletConnectDownloadElement: {
        prototype: HTMLMvxWalletConnectDownloadElement;
        new (): HTMLMvxWalletConnectDownloadElement;
    };
    interface HTMLMvxWalletConnectGooglePlayIconElement extends Components.MvxWalletConnectGooglePlayIcon, HTMLStencilElement {
    }
    var HTMLMvxWalletConnectGooglePlayIconElement: {
        prototype: HTMLMvxWalletConnectGooglePlayIconElement;
        new (): HTMLMvxWalletConnectGooglePlayIconElement;
    };
    interface HTMLMvxWalletConnectScanElementEventMap {
        "downloadClick": any;
    }
    interface HTMLMvxWalletConnectScanElement extends Components.MvxWalletConnectScan, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxWalletConnectScanElementEventMap>(type: K, listener: (this: HTMLMvxWalletConnectScanElement, ev: MvxWalletConnectScanCustomEvent<HTMLMvxWalletConnectScanElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxWalletConnectScanElementEventMap>(type: K, listener: (this: HTMLMvxWalletConnectScanElement, ev: MvxWalletConnectScanCustomEvent<HTMLMvxWalletConnectScanElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxWalletConnectScanElement: {
        prototype: HTMLMvxWalletConnectScanElement;
        new (): HTMLMvxWalletConnectScanElement;
    };
    interface HTMLMvxWalletProviderIconElement extends Components.MvxWalletProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxWalletProviderIconElement: {
        prototype: HTMLMvxWalletProviderIconElement;
        new (): HTMLMvxWalletProviderIconElement;
    };
    interface HTMLMvxXaliasProviderIconElement extends Components.MvxXaliasProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxXaliasProviderIconElement: {
        prototype: HTMLMvxXaliasProviderIconElement;
        new (): HTMLMvxXaliasProviderIconElement;
    };
    interface HTMLMvxXportalDownloadQrIconElement extends Components.MvxXportalDownloadQrIcon, HTMLStencilElement {
    }
    var HTMLMvxXportalDownloadQrIconElement: {
        prototype: HTMLMvxXportalDownloadQrIconElement;
        new (): HTMLMvxXportalDownloadQrIconElement;
    };
    interface HTMLMvxXportalQrCodePreloaderElement extends Components.MvxXportalQrCodePreloader, HTMLStencilElement {
    }
    var HTMLMvxXportalQrCodePreloaderElement: {
        prototype: HTMLMvxXportalQrCodePreloaderElement;
        new (): HTMLMvxXportalQrCodePreloaderElement;
    };
    interface HTMLElementTagNameMap {
        "mvx-angles-left-icon": HTMLMvxAnglesLeftIconElement;
        "mvx-angles-right-icon": HTMLMvxAnglesRightIconElement;
        "mvx-arrow-right-icon": HTMLMvxArrowRightIconElement;
        "mvx-arrow-up-right-from-square-icon": HTMLMvxArrowUpRightFromSquareIconElement;
        "mvx-arrow-up-right-icon": HTMLMvxArrowUpRightIconElement;
        "mvx-back-arrow-icon": HTMLMvxBackArrowIconElement;
        "mvx-check-icon": HTMLMvxCheckIconElement;
        "mvx-circle-exclamation-icon": HTMLMvxCircleExclamationIconElement;
        "mvx-close-icon": HTMLMvxCloseIconElement;
        "mvx-copy-button": HTMLMvxCopyButtonElement;
        "mvx-custom-toast": HTMLMvxCustomToastElement;
        "mvx-default-transaction-icon-large": HTMLMvxDefaultTransactionIconLargeElement;
        "mvx-default-transaction-icon-small": HTMLMvxDefaultTransactionIconSmallElement;
        "mvx-explorer-link": HTMLMvxExplorerLinkElement;
        "mvx-extension-provider-icon": HTMLMvxExtensionProviderIconElement;
        "mvx-fa-icon": HTMLMvxFaIconElement;
        "mvx-format-amount": HTMLMvxFormatAmountElement;
        "mvx-generic-toast": HTMLMvxGenericToastElement;
        "mvx-ledger-addresses": HTMLMvxLedgerAddressesElement;
        "mvx-ledger-confirm": HTMLMvxLedgerConfirmElement;
        "mvx-ledger-connect": HTMLMvxLedgerConnectElement;
        "mvx-ledger-icon": HTMLMvxLedgerIconElement;
        "mvx-ledger-intro": HTMLMvxLedgerIntroElement;
        "mvx-ledger-provider-icon": HTMLMvxLedgerProviderIconElement;
        "mvx-magnifying-glass-icon": HTMLMvxMagnifyingGlassIconElement;
        "mvx-metamask-provider-icon": HTMLMvxMetamaskProviderIconElement;
        "mvx-multiversx-logo-icon": HTMLMvxMultiversxLogoIconElement;
        "mvx-notifications-feed": HTMLMvxNotificationsFeedElement;
        "mvx-pagination": HTMLMvxPaginationElement;
        "mvx-pagination-ellipsis": HTMLMvxPaginationEllipsisElement;
        "mvx-pagination-ellipsis-form": HTMLMvxPaginationEllipsisFormElement;
        "mvx-passkey-provider-icon": HTMLMvxPasskeyProviderIconElement;
        "mvx-pencil-icon": HTMLMvxPencilIconElement;
        "mvx-pending-transactions-panel": HTMLMvxPendingTransactionsPanelElement;
        "mvx-preloader": HTMLMvxPreloaderElement;
        "mvx-provider-idle-screen": HTMLMvxProviderIdleScreenElement;
        "mvx-side-panel": HTMLMvxSidePanelElement;
        "mvx-side-panel-header": HTMLMvxSidePanelHeaderElement;
        "mvx-sign-transactions-advanced": HTMLMvxSignTransactionsAdvancedElement;
        "mvx-sign-transactions-advanced-data": HTMLMvxSignTransactionsAdvancedDataElement;
        "mvx-sign-transactions-advanced-data-decode": HTMLMvxSignTransactionsAdvancedDataDecodeElement;
        "mvx-sign-transactions-footer": HTMLMvxSignTransactionsFooterElement;
        "mvx-sign-transactions-header": HTMLMvxSignTransactionsHeaderElement;
        "mvx-sign-transactions-overview": HTMLMvxSignTransactionsOverviewElement;
        "mvx-sign-transactions-panel": HTMLMvxSignTransactionsPanelElement;
        "mvx-simple-toast": HTMLMvxSimpleToastElement;
        "mvx-single-angle-down-icon": HTMLMvxSingleAngleDownIconElement;
        "mvx-single-angle-left-icon": HTMLMvxSingleAngleLeftIconElement;
        "mvx-single-angle-right-icon": HTMLMvxSingleAngleRightIconElement;
        "mvx-spinner-icon": HTMLMvxSpinnerIconElement;
        "mvx-toast-list": HTMLMvxToastListElement;
        "mvx-tooltip": HTMLMvxTooltipElement;
        "mvx-transaction-account": HTMLMvxTransactionAccountElement;
        "mvx-transaction-account-name": HTMLMvxTransactionAccountNameElement;
        "mvx-transaction-age": HTMLMvxTransactionAgeElement;
        "mvx-transaction-asset-icon": HTMLMvxTransactionAssetIconElement;
        "mvx-transaction-direction-badge": HTMLMvxTransactionDirectionBadgeElement;
        "mvx-transaction-hash": HTMLMvxTransactionHashElement;
        "mvx-transaction-icon": HTMLMvxTransactionIconElement;
        "mvx-transaction-list-item": HTMLMvxTransactionListItemElement;
        "mvx-transaction-method": HTMLMvxTransactionMethodElement;
        "mvx-transaction-shards": HTMLMvxTransactionShardsElement;
        "mvx-transaction-toast": HTMLMvxTransactionToastElement;
        "mvx-transaction-toast-content": HTMLMvxTransactionToastContentElement;
        "mvx-transaction-toast-details": HTMLMvxTransactionToastDetailsElement;
        "mvx-transaction-toast-details-body": HTMLMvxTransactionToastDetailsBodyElement;
        "mvx-transaction-toast-progress": HTMLMvxTransactionToastProgressElement;
        "mvx-transaction-value": HTMLMvxTransactionValueElement;
        "mvx-transactions-table": HTMLMvxTransactionsTableElement;
        "mvx-triangular-warning-icon": HTMLMvxTriangularWarningIconElement;
        "mvx-trim": HTMLMvxTrimElement;
        "mvx-unlock-button": HTMLMvxUnlockButtonElement;
        "mvx-unlock-panel": HTMLMvxUnlockPanelElement;
        "mvx-unlock-panel-footer": HTMLMvxUnlockPanelFooterElement;
        "mvx-unlock-panel-group": HTMLMvxUnlockPanelGroupElement;
        "mvx-unlock-provider-button": HTMLMvxUnlockProviderButtonElement;
        "mvx-wallet-connect": HTMLMvxWalletConnectElement;
        "mvx-wallet-connect-app-gallery-icon": HTMLMvxWalletConnectAppGalleryIconElement;
        "mvx-wallet-connect-app-store-icon": HTMLMvxWalletConnectAppStoreIconElement;
        "mvx-wallet-connect-download": HTMLMvxWalletConnectDownloadElement;
        "mvx-wallet-connect-google-play-icon": HTMLMvxWalletConnectGooglePlayIconElement;
        "mvx-wallet-connect-scan": HTMLMvxWalletConnectScanElement;
        "mvx-wallet-provider-icon": HTMLMvxWalletProviderIconElement;
        "mvx-xalias-provider-icon": HTMLMvxXaliasProviderIconElement;
        "mvx-xportal-download-qr-icon": HTMLMvxXportalDownloadQrIconElement;
        "mvx-xportal-qr-code-preloader": HTMLMvxXportalQrCodePreloaderElement;
    }
}
declare namespace LocalJSX {
    interface MvxAnglesLeftIcon {
    }
    interface MvxAnglesRightIcon {
    }
    interface MvxArrowRightIcon {
        "class"?: string;
    }
    interface MvxArrowUpRightFromSquareIcon {
        "class"?: string;
    }
    interface MvxArrowUpRightIcon {
        "class"?: string;
    }
    interface MvxBackArrowIcon {
        "class"?: string;
    }
    interface MvxCheckIcon {
        "class"?: string;
    }
    interface MvxCircleExclamationIcon {
    }
    interface MvxCloseIcon {
    }
    interface MvxCopyButton {
        /**
          * @default 'copy-button'
         */
        "class"?: string;
        "copyIcon"?: IconDefinition | string;
        /**
          * @default 'copy-button-icon'
         */
        "iconClass"?: string;
        "successIcon"?: IconDefinition | string;
        "text"?: string;
    }
    interface MvxCustomToast {
        "onDeleteToast"?: (event: MvxCustomToastCustomEvent<string>) => void;
        "toast"?: IComponentToast;
    }
    interface MvxDefaultTransactionIconLarge {
        "class"?: string;
    }
    interface MvxDefaultTransactionIconSmall {
        "class"?: string;
    }
    interface MvxExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "iconClass"?: string;
        "link"?: string;
    }
    interface MvxExtensionProviderIcon {
        "class"?: string;
        "height"?: number;
        "width"?: number;
    }
    interface MvxFaIcon {
        /**
          * @default 'fa-icon'
         */
        "class"?: string;
        "description"?: string;
        "icon"?: IconDefinition | string;
    }
    interface MvxFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "decimalClass"?: string;
        "isValid"?: boolean;
        "label"?: string;
        "labelClass"?: string;
        /**
          * @default true
         */
        "showLabel"?: boolean;
        "valueDecimal"?: string;
        "valueInteger"?: string;
    }
    interface MvxGenericToast {
        "onDeleteToast"?: (event: MvxGenericToastCustomEvent<string>) => void;
        "toast"?: CustomToastType;
    }
    interface MvxLedgerAddresses {
        "accountScreenData"?: IAccountScreenData;
        "onAccessWallet"?: (event: MvxLedgerAddressesCustomEvent<any>) => void;
        "onPageChange"?: (event: MvxLedgerAddressesCustomEvent<number>) => void;
        "onSelectAccount"?: (event: MvxLedgerAddressesCustomEvent<any>) => void;
        "selectedIndex"?: number;
    }
    interface MvxLedgerConfirm {
        "confirmScreenData"?: IConfirmScreenData;
    }
    interface MvxLedgerConnect {
        /**
          * @default {     accountScreenData: null,     confirmScreenData: null,     connectScreenData: {},   }
         */
        "data"?: ILedgerConnectPanelData;
    }
    interface MvxLedgerIcon {
        "class"?: string;
    }
    interface MvxLedgerIntro {
        "connectScreenData"?: IConnectScreenData;
        /**
          * @default false
         */
        "isAwaiting"?: boolean;
        "onConnect"?: (event: MvxLedgerIntroCustomEvent<any>) => void;
    }
    interface MvxLedgerProviderIcon {
        "class"?: string;
    }
    interface MvxMagnifyingGlassIcon {
        "class"?: string;
    }
    interface MvxMetamaskProviderIcon {
        "class"?: string;
    }
    interface MvxMultiversxLogoIcon {
        "class"?: string;
    }
    interface MvxNotificationsFeed {
    }
    interface MvxPagination {
        "class"?: string;
        /**
          * @default 1
         */
        "currentPage"?: number;
        /**
          * @default false
         */
        "isDisabled"?: boolean;
        "onPageChange"?: (event: MvxPaginationCustomEvent<number>) => void;
        "totalPages"?: number;
    }
    interface MvxPaginationEllipsis {
        /**
          * @default false
         */
        "isActive"?: boolean;
    }
    interface MvxPaginationEllipsisForm {
        /**
          * @default false
         */
        "isVisible"?: boolean;
        "maxPageToSearchFor"?: number;
        "onSearch"?: (event: MvxPaginationEllipsisFormCustomEvent<number>) => void;
    }
    interface MvxPasskeyProviderIcon {
        "class"?: string;
    }
    interface MvxPencilIcon {
        "class"?: string;
    }
    interface MvxPendingTransactionsPanel {
    }
    interface MvxPreloader {
        "class"?: string;
    }
    interface MvxProviderIdleScreen {
        /**
          * @default ''
         */
        "introText"?: string;
        /**
          * @default 'Requesting Connection'
         */
        "introTitle"?: string;
        "onAccess"?: (event: MvxProviderIdleScreenCustomEvent<any>) => void;
        "onClose"?: (event: MvxProviderIdleScreenCustomEvent<any>) => void;
        /**
          * @default null
         */
        "provider"?: IProviderBase | null;
    }
    interface MvxSidePanel {
        "hasBackButton"?: boolean;
        /**
          * @default false
         */
        "isOpen"?: boolean;
        "onBack"?: (event: MvxSidePanelCustomEvent<void>) => void;
        "onClose"?: (event: MvxSidePanelCustomEvent<void>) => void;
        "panelClassName"?: string;
        "panelTitle"?: string;
        /**
          * @default true
         */
        "showHeader"?: boolean;
    }
    interface MvxSidePanelHeader {
        /**
          * @default true
         */
        "hasLeftButton"?: boolean;
        /**
          * @default true
         */
        "hasRightButton"?: boolean;
        "onLeftButtonClick"?: (event: MvxSidePanelHeaderCustomEvent<any>) => void;
        "onRightButtonClick"?: (event: MvxSidePanelHeaderCustomEvent<any>) => void;
        "panelClassName"?: string;
        "panelTitle"?: string;
    }
    interface MvxSignTransactionsAdvanced {
        "data"?: string;
        "highlight"?: string;
    }
    interface MvxSignTransactionsAdvancedData {
        "data"?: string;
        "highlight"?: string;
    }
    interface MvxSignTransactionsAdvancedDataDecode {
        /**
          * @default DecodeMethodEnum.decimal
         */
        "currentDecodeMethod"?: DecodeMethodEnum;
        /**
          * @default false
         */
        "isToggled"?: boolean;
    }
    interface MvxSignTransactionsFooter {
    }
    interface MvxSignTransactionsHeader {
    }
    interface MvxSignTransactionsOverview {
        "action"?: string;
        "amount"?: string;
        "identifier"?: string;
        "interactor"?: string;
        "interactorIconUrl"?: string;
        /**
          * @default false
         */
        "isApp"?: boolean;
        /**
          * @default '~$0.00078'
         */
        "networkFee"?: string;
        "tokenIconUrl"?: string;
        "usdValue"?: string;
    }
    interface MvxSignTransactionsPanel {
    }
    interface MvxSimpleToast {
        "onDeleteToast"?: (event: MvxSimpleToastCustomEvent<void>) => void;
        "toast"?: ISimpleToast;
    }
    interface MvxSingleAngleDownIcon {
        "class"?: string;
    }
    interface MvxSingleAngleLeftIcon {
        "class"?: string;
    }
    interface MvxSingleAngleRightIcon {
        "class"?: string;
    }
    interface MvxSpinnerIcon {
        "class"?: string;
    }
    interface MvxToastList {
    }
    interface MvxTooltip {
        "class"?: string;
        "onTriggerRender"?: (event: MvxTooltipCustomEvent<boolean>) => void;
        /**
          * @default 'top'
         */
        "position"?: 'top' | 'bottom';
        "trigger"?: HTMLElement;
        /**
          * @default false
         */
        "triggerOnClick"?: boolean;
    }
    interface MvxTransactionAccount {
        "account"?: TransactionAccountType;
        "class"?: string;
        "dataTestId"?: string;
        "scope"?: 'receiver' | 'sender';
        /**
          * @default false
         */
        "showLockedAccounts"?: boolean;
    }
    interface MvxTransactionAccountName {
        "address"?: string;
        "class"?: string;
        "dataTestId"?: string;
        "description"?: string;
        "name"?: string;
    }
    interface MvxTransactionAge {
        "age"?: string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface MvxTransactionAssetIcon {
        "iconSize"?: IconSizeEnumType;
        "transaction"?: ITransactionListItem;
    }
    interface MvxTransactionDirectionBadge {
        "class"?: string;
        "direction"?: string;
    }
    interface MvxTransactionHash {
        "class"?: string;
        "transaction"?: TransactionRowType;
    }
    interface MvxTransactionIcon {
        "class"?: string;
        "iconInfo"?: TransactionIconInfoType;
    }
    interface MvxTransactionListItem {
        "transaction"?: ITransactionListItem1;
    }
    interface MvxTransactionMethod {
        "actionDescription"?: string;
        "class"?: string;
        "method"?: string;
    }
    interface MvxTransactionShards {
        "class"?: string;
        "transaction"?: TransactionRowType;
    }
    interface MvxTransactionToast {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: MvxTransactionToastCustomEvent<void>) => void;
        /**
          * @default ''
         */
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        /**
          * @default ''
         */
        "toastId"?: string;
        "transactionProgressState"?: ITransactionProgressState;
        /**
          * @default []
         */
        "transactions"?: ITransactionListItem[];
        "wrapperClass"?: string;
    }
    interface MvxTransactionToastContent {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: MvxTransactionToastContentCustomEvent<void>) => void;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        "transactions"?: ITransactionListItem[];
    }
    interface MvxTransactionToastDetails {
        /**
          * @default 5
         */
        "maxShownTransactions"?: number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass"?: string;
        "transactions"?: ITransactionListItem[];
    }
    interface MvxTransactionToastDetailsBody {
        "hash"?: string;
        "index"?: string;
        "link"?: string;
        "status"?: string;
        /**
          * @default 'transaction-details-list-item'
         */
        "transactionClass"?: string;
    }
    interface MvxTransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface MvxTransactionValue {
        "class"?: string;
        "value"?: TransactionValueType;
    }
    interface MvxTransactionsTable {
        "class"?: string;
        "transactions"?: TransactionRowType[];
    }
    interface MvxTriangularWarningIcon {
    }
    interface MvxTrim {
        "class"?: string;
        "dataTestId"?: string;
        "text"?: string;
    }
    interface MvxUnlockButton {
        "class"?: string;
        "icon"?: HTMLElement;
        "iconUrl"?: string;
        "label"?: string;
        "type"?: IProviderBase['type'];
    }
    interface MvxUnlockPanel {
    }
    interface MvxUnlockPanelFooter {
        "walletAddress"?: string;
    }
    interface MvxUnlockPanelGroup {
        "class"?: string;
        "onLogin"?: (event: MvxUnlockPanelGroupCustomEvent<IProviderBase>) => void;
        /**
          * @default []
         */
        "providers"?: IProviderBase[];
    }
    interface MvxUnlockProviderButton {
        "class"?: string;
        "provider"?: IProviderBase<ProviderTypeEnum>;
    }
    interface MvxWalletConnect {
        /**
          * @default { wcURI: '' }
         */
        "data"?: IWalletConnectPanelData;
        /**
          * @default ''
         */
        "qrCodeSvg"?: string;
    }
    interface MvxWalletConnectAppGalleryIcon {
        "class"?: string;
    }
    interface MvxWalletConnectAppStoreIcon {
        "class"?: string;
    }
    interface MvxWalletConnectDownload {
        "class"?: string;
    }
    interface MvxWalletConnectGooglePlayIcon {
        "class"?: string;
    }
    interface MvxWalletConnectScan {
        "class"?: string;
        "onDownloadClick"?: (event: MvxWalletConnectScanCustomEvent<any>) => void;
        /**
          * @default ''
         */
        "qrCodeSvg"?: string;
        /**
          * @default ''
         */
        "walletConnectDeepLink"?: string;
    }
    interface MvxWalletProviderIcon {
        "class"?: string;
    }
    interface MvxXaliasProviderIcon {
    }
    interface MvxXportalDownloadQrIcon {
        /**
          * @default ''
         */
        "class"?: string;
    }
    interface MvxXportalQrCodePreloader {
        "class"?: string;
    }
    interface IntrinsicElements {
        "mvx-angles-left-icon": MvxAnglesLeftIcon;
        "mvx-angles-right-icon": MvxAnglesRightIcon;
        "mvx-arrow-right-icon": MvxArrowRightIcon;
        "mvx-arrow-up-right-from-square-icon": MvxArrowUpRightFromSquareIcon;
        "mvx-arrow-up-right-icon": MvxArrowUpRightIcon;
        "mvx-back-arrow-icon": MvxBackArrowIcon;
        "mvx-check-icon": MvxCheckIcon;
        "mvx-circle-exclamation-icon": MvxCircleExclamationIcon;
        "mvx-close-icon": MvxCloseIcon;
        "mvx-copy-button": MvxCopyButton;
        "mvx-custom-toast": MvxCustomToast;
        "mvx-default-transaction-icon-large": MvxDefaultTransactionIconLarge;
        "mvx-default-transaction-icon-small": MvxDefaultTransactionIconSmall;
        "mvx-explorer-link": MvxExplorerLink;
        "mvx-extension-provider-icon": MvxExtensionProviderIcon;
        "mvx-fa-icon": MvxFaIcon;
        "mvx-format-amount": MvxFormatAmount;
        "mvx-generic-toast": MvxGenericToast;
        "mvx-ledger-addresses": MvxLedgerAddresses;
        "mvx-ledger-confirm": MvxLedgerConfirm;
        "mvx-ledger-connect": MvxLedgerConnect;
        "mvx-ledger-icon": MvxLedgerIcon;
        "mvx-ledger-intro": MvxLedgerIntro;
        "mvx-ledger-provider-icon": MvxLedgerProviderIcon;
        "mvx-magnifying-glass-icon": MvxMagnifyingGlassIcon;
        "mvx-metamask-provider-icon": MvxMetamaskProviderIcon;
        "mvx-multiversx-logo-icon": MvxMultiversxLogoIcon;
        "mvx-notifications-feed": MvxNotificationsFeed;
        "mvx-pagination": MvxPagination;
        "mvx-pagination-ellipsis": MvxPaginationEllipsis;
        "mvx-pagination-ellipsis-form": MvxPaginationEllipsisForm;
        "mvx-passkey-provider-icon": MvxPasskeyProviderIcon;
        "mvx-pencil-icon": MvxPencilIcon;
        "mvx-pending-transactions-panel": MvxPendingTransactionsPanel;
        "mvx-preloader": MvxPreloader;
        "mvx-provider-idle-screen": MvxProviderIdleScreen;
        "mvx-side-panel": MvxSidePanel;
        "mvx-side-panel-header": MvxSidePanelHeader;
        "mvx-sign-transactions-advanced": MvxSignTransactionsAdvanced;
        "mvx-sign-transactions-advanced-data": MvxSignTransactionsAdvancedData;
        "mvx-sign-transactions-advanced-data-decode": MvxSignTransactionsAdvancedDataDecode;
        "mvx-sign-transactions-footer": MvxSignTransactionsFooter;
        "mvx-sign-transactions-header": MvxSignTransactionsHeader;
        "mvx-sign-transactions-overview": MvxSignTransactionsOverview;
        "mvx-sign-transactions-panel": MvxSignTransactionsPanel;
        "mvx-simple-toast": MvxSimpleToast;
        "mvx-single-angle-down-icon": MvxSingleAngleDownIcon;
        "mvx-single-angle-left-icon": MvxSingleAngleLeftIcon;
        "mvx-single-angle-right-icon": MvxSingleAngleRightIcon;
        "mvx-spinner-icon": MvxSpinnerIcon;
        "mvx-toast-list": MvxToastList;
        "mvx-tooltip": MvxTooltip;
        "mvx-transaction-account": MvxTransactionAccount;
        "mvx-transaction-account-name": MvxTransactionAccountName;
        "mvx-transaction-age": MvxTransactionAge;
        "mvx-transaction-asset-icon": MvxTransactionAssetIcon;
        "mvx-transaction-direction-badge": MvxTransactionDirectionBadge;
        "mvx-transaction-hash": MvxTransactionHash;
        "mvx-transaction-icon": MvxTransactionIcon;
        "mvx-transaction-list-item": MvxTransactionListItem;
        "mvx-transaction-method": MvxTransactionMethod;
        "mvx-transaction-shards": MvxTransactionShards;
        "mvx-transaction-toast": MvxTransactionToast;
        "mvx-transaction-toast-content": MvxTransactionToastContent;
        "mvx-transaction-toast-details": MvxTransactionToastDetails;
        "mvx-transaction-toast-details-body": MvxTransactionToastDetailsBody;
        "mvx-transaction-toast-progress": MvxTransactionToastProgress;
        "mvx-transaction-value": MvxTransactionValue;
        "mvx-transactions-table": MvxTransactionsTable;
        "mvx-triangular-warning-icon": MvxTriangularWarningIcon;
        "mvx-trim": MvxTrim;
        "mvx-unlock-button": MvxUnlockButton;
        "mvx-unlock-panel": MvxUnlockPanel;
        "mvx-unlock-panel-footer": MvxUnlockPanelFooter;
        "mvx-unlock-panel-group": MvxUnlockPanelGroup;
        "mvx-unlock-provider-button": MvxUnlockProviderButton;
        "mvx-wallet-connect": MvxWalletConnect;
        "mvx-wallet-connect-app-gallery-icon": MvxWalletConnectAppGalleryIcon;
        "mvx-wallet-connect-app-store-icon": MvxWalletConnectAppStoreIcon;
        "mvx-wallet-connect-download": MvxWalletConnectDownload;
        "mvx-wallet-connect-google-play-icon": MvxWalletConnectGooglePlayIcon;
        "mvx-wallet-connect-scan": MvxWalletConnectScan;
        "mvx-wallet-provider-icon": MvxWalletProviderIcon;
        "mvx-xalias-provider-icon": MvxXaliasProviderIcon;
        "mvx-xportal-download-qr-icon": MvxXportalDownloadQrIcon;
        "mvx-xportal-qr-code-preloader": MvxXportalQrCodePreloader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mvx-angles-left-icon": LocalJSX.MvxAnglesLeftIcon & JSXBase.HTMLAttributes<HTMLMvxAnglesLeftIconElement>;
            "mvx-angles-right-icon": LocalJSX.MvxAnglesRightIcon & JSXBase.HTMLAttributes<HTMLMvxAnglesRightIconElement>;
            "mvx-arrow-right-icon": LocalJSX.MvxArrowRightIcon & JSXBase.HTMLAttributes<HTMLMvxArrowRightIconElement>;
            "mvx-arrow-up-right-from-square-icon": LocalJSX.MvxArrowUpRightFromSquareIcon & JSXBase.HTMLAttributes<HTMLMvxArrowUpRightFromSquareIconElement>;
            "mvx-arrow-up-right-icon": LocalJSX.MvxArrowUpRightIcon & JSXBase.HTMLAttributes<HTMLMvxArrowUpRightIconElement>;
            "mvx-back-arrow-icon": LocalJSX.MvxBackArrowIcon & JSXBase.HTMLAttributes<HTMLMvxBackArrowIconElement>;
            "mvx-check-icon": LocalJSX.MvxCheckIcon & JSXBase.HTMLAttributes<HTMLMvxCheckIconElement>;
            "mvx-circle-exclamation-icon": LocalJSX.MvxCircleExclamationIcon & JSXBase.HTMLAttributes<HTMLMvxCircleExclamationIconElement>;
            "mvx-close-icon": LocalJSX.MvxCloseIcon & JSXBase.HTMLAttributes<HTMLMvxCloseIconElement>;
            "mvx-copy-button": LocalJSX.MvxCopyButton & JSXBase.HTMLAttributes<HTMLMvxCopyButtonElement>;
            "mvx-custom-toast": LocalJSX.MvxCustomToast & JSXBase.HTMLAttributes<HTMLMvxCustomToastElement>;
            "mvx-default-transaction-icon-large": LocalJSX.MvxDefaultTransactionIconLarge & JSXBase.HTMLAttributes<HTMLMvxDefaultTransactionIconLargeElement>;
            "mvx-default-transaction-icon-small": LocalJSX.MvxDefaultTransactionIconSmall & JSXBase.HTMLAttributes<HTMLMvxDefaultTransactionIconSmallElement>;
            "mvx-explorer-link": LocalJSX.MvxExplorerLink & JSXBase.HTMLAttributes<HTMLMvxExplorerLinkElement>;
            "mvx-extension-provider-icon": LocalJSX.MvxExtensionProviderIcon & JSXBase.HTMLAttributes<HTMLMvxExtensionProviderIconElement>;
            "mvx-fa-icon": LocalJSX.MvxFaIcon & JSXBase.HTMLAttributes<HTMLMvxFaIconElement>;
            "mvx-format-amount": LocalJSX.MvxFormatAmount & JSXBase.HTMLAttributes<HTMLMvxFormatAmountElement>;
            "mvx-generic-toast": LocalJSX.MvxGenericToast & JSXBase.HTMLAttributes<HTMLMvxGenericToastElement>;
            "mvx-ledger-addresses": LocalJSX.MvxLedgerAddresses & JSXBase.HTMLAttributes<HTMLMvxLedgerAddressesElement>;
            "mvx-ledger-confirm": LocalJSX.MvxLedgerConfirm & JSXBase.HTMLAttributes<HTMLMvxLedgerConfirmElement>;
            "mvx-ledger-connect": LocalJSX.MvxLedgerConnect & JSXBase.HTMLAttributes<HTMLMvxLedgerConnectElement>;
            "mvx-ledger-icon": LocalJSX.MvxLedgerIcon & JSXBase.HTMLAttributes<HTMLMvxLedgerIconElement>;
            "mvx-ledger-intro": LocalJSX.MvxLedgerIntro & JSXBase.HTMLAttributes<HTMLMvxLedgerIntroElement>;
            "mvx-ledger-provider-icon": LocalJSX.MvxLedgerProviderIcon & JSXBase.HTMLAttributes<HTMLMvxLedgerProviderIconElement>;
            "mvx-magnifying-glass-icon": LocalJSX.MvxMagnifyingGlassIcon & JSXBase.HTMLAttributes<HTMLMvxMagnifyingGlassIconElement>;
            "mvx-metamask-provider-icon": LocalJSX.MvxMetamaskProviderIcon & JSXBase.HTMLAttributes<HTMLMvxMetamaskProviderIconElement>;
            "mvx-multiversx-logo-icon": LocalJSX.MvxMultiversxLogoIcon & JSXBase.HTMLAttributes<HTMLMvxMultiversxLogoIconElement>;
            "mvx-notifications-feed": LocalJSX.MvxNotificationsFeed & JSXBase.HTMLAttributes<HTMLMvxNotificationsFeedElement>;
            "mvx-pagination": LocalJSX.MvxPagination & JSXBase.HTMLAttributes<HTMLMvxPaginationElement>;
            "mvx-pagination-ellipsis": LocalJSX.MvxPaginationEllipsis & JSXBase.HTMLAttributes<HTMLMvxPaginationEllipsisElement>;
            "mvx-pagination-ellipsis-form": LocalJSX.MvxPaginationEllipsisForm & JSXBase.HTMLAttributes<HTMLMvxPaginationEllipsisFormElement>;
            "mvx-passkey-provider-icon": LocalJSX.MvxPasskeyProviderIcon & JSXBase.HTMLAttributes<HTMLMvxPasskeyProviderIconElement>;
            "mvx-pencil-icon": LocalJSX.MvxPencilIcon & JSXBase.HTMLAttributes<HTMLMvxPencilIconElement>;
            "mvx-pending-transactions-panel": LocalJSX.MvxPendingTransactionsPanel & JSXBase.HTMLAttributes<HTMLMvxPendingTransactionsPanelElement>;
            "mvx-preloader": LocalJSX.MvxPreloader & JSXBase.HTMLAttributes<HTMLMvxPreloaderElement>;
            "mvx-provider-idle-screen": LocalJSX.MvxProviderIdleScreen & JSXBase.HTMLAttributes<HTMLMvxProviderIdleScreenElement>;
            "mvx-side-panel": LocalJSX.MvxSidePanel & JSXBase.HTMLAttributes<HTMLMvxSidePanelElement>;
            "mvx-side-panel-header": LocalJSX.MvxSidePanelHeader & JSXBase.HTMLAttributes<HTMLMvxSidePanelHeaderElement>;
            "mvx-sign-transactions-advanced": LocalJSX.MvxSignTransactionsAdvanced & JSXBase.HTMLAttributes<HTMLMvxSignTransactionsAdvancedElement>;
            "mvx-sign-transactions-advanced-data": LocalJSX.MvxSignTransactionsAdvancedData & JSXBase.HTMLAttributes<HTMLMvxSignTransactionsAdvancedDataElement>;
            "mvx-sign-transactions-advanced-data-decode": LocalJSX.MvxSignTransactionsAdvancedDataDecode & JSXBase.HTMLAttributes<HTMLMvxSignTransactionsAdvancedDataDecodeElement>;
            "mvx-sign-transactions-footer": LocalJSX.MvxSignTransactionsFooter & JSXBase.HTMLAttributes<HTMLMvxSignTransactionsFooterElement>;
            "mvx-sign-transactions-header": LocalJSX.MvxSignTransactionsHeader & JSXBase.HTMLAttributes<HTMLMvxSignTransactionsHeaderElement>;
            "mvx-sign-transactions-overview": LocalJSX.MvxSignTransactionsOverview & JSXBase.HTMLAttributes<HTMLMvxSignTransactionsOverviewElement>;
            "mvx-sign-transactions-panel": LocalJSX.MvxSignTransactionsPanel & JSXBase.HTMLAttributes<HTMLMvxSignTransactionsPanelElement>;
            "mvx-simple-toast": LocalJSX.MvxSimpleToast & JSXBase.HTMLAttributes<HTMLMvxSimpleToastElement>;
            "mvx-single-angle-down-icon": LocalJSX.MvxSingleAngleDownIcon & JSXBase.HTMLAttributes<HTMLMvxSingleAngleDownIconElement>;
            "mvx-single-angle-left-icon": LocalJSX.MvxSingleAngleLeftIcon & JSXBase.HTMLAttributes<HTMLMvxSingleAngleLeftIconElement>;
            "mvx-single-angle-right-icon": LocalJSX.MvxSingleAngleRightIcon & JSXBase.HTMLAttributes<HTMLMvxSingleAngleRightIconElement>;
            "mvx-spinner-icon": LocalJSX.MvxSpinnerIcon & JSXBase.HTMLAttributes<HTMLMvxSpinnerIconElement>;
            "mvx-toast-list": LocalJSX.MvxToastList & JSXBase.HTMLAttributes<HTMLMvxToastListElement>;
            "mvx-tooltip": LocalJSX.MvxTooltip & JSXBase.HTMLAttributes<HTMLMvxTooltipElement>;
            "mvx-transaction-account": LocalJSX.MvxTransactionAccount & JSXBase.HTMLAttributes<HTMLMvxTransactionAccountElement>;
            "mvx-transaction-account-name": LocalJSX.MvxTransactionAccountName & JSXBase.HTMLAttributes<HTMLMvxTransactionAccountNameElement>;
            "mvx-transaction-age": LocalJSX.MvxTransactionAge & JSXBase.HTMLAttributes<HTMLMvxTransactionAgeElement>;
            "mvx-transaction-asset-icon": LocalJSX.MvxTransactionAssetIcon & JSXBase.HTMLAttributes<HTMLMvxTransactionAssetIconElement>;
            "mvx-transaction-direction-badge": LocalJSX.MvxTransactionDirectionBadge & JSXBase.HTMLAttributes<HTMLMvxTransactionDirectionBadgeElement>;
            "mvx-transaction-hash": LocalJSX.MvxTransactionHash & JSXBase.HTMLAttributes<HTMLMvxTransactionHashElement>;
            "mvx-transaction-icon": LocalJSX.MvxTransactionIcon & JSXBase.HTMLAttributes<HTMLMvxTransactionIconElement>;
            "mvx-transaction-list-item": LocalJSX.MvxTransactionListItem & JSXBase.HTMLAttributes<HTMLMvxTransactionListItemElement>;
            "mvx-transaction-method": LocalJSX.MvxTransactionMethod & JSXBase.HTMLAttributes<HTMLMvxTransactionMethodElement>;
            "mvx-transaction-shards": LocalJSX.MvxTransactionShards & JSXBase.HTMLAttributes<HTMLMvxTransactionShardsElement>;
            "mvx-transaction-toast": LocalJSX.MvxTransactionToast & JSXBase.HTMLAttributes<HTMLMvxTransactionToastElement>;
            "mvx-transaction-toast-content": LocalJSX.MvxTransactionToastContent & JSXBase.HTMLAttributes<HTMLMvxTransactionToastContentElement>;
            "mvx-transaction-toast-details": LocalJSX.MvxTransactionToastDetails & JSXBase.HTMLAttributes<HTMLMvxTransactionToastDetailsElement>;
            "mvx-transaction-toast-details-body": LocalJSX.MvxTransactionToastDetailsBody & JSXBase.HTMLAttributes<HTMLMvxTransactionToastDetailsBodyElement>;
            "mvx-transaction-toast-progress": LocalJSX.MvxTransactionToastProgress & JSXBase.HTMLAttributes<HTMLMvxTransactionToastProgressElement>;
            "mvx-transaction-value": LocalJSX.MvxTransactionValue & JSXBase.HTMLAttributes<HTMLMvxTransactionValueElement>;
            "mvx-transactions-table": LocalJSX.MvxTransactionsTable & JSXBase.HTMLAttributes<HTMLMvxTransactionsTableElement>;
            "mvx-triangular-warning-icon": LocalJSX.MvxTriangularWarningIcon & JSXBase.HTMLAttributes<HTMLMvxTriangularWarningIconElement>;
            "mvx-trim": LocalJSX.MvxTrim & JSXBase.HTMLAttributes<HTMLMvxTrimElement>;
            "mvx-unlock-button": LocalJSX.MvxUnlockButton & JSXBase.HTMLAttributes<HTMLMvxUnlockButtonElement>;
            "mvx-unlock-panel": LocalJSX.MvxUnlockPanel & JSXBase.HTMLAttributes<HTMLMvxUnlockPanelElement>;
            "mvx-unlock-panel-footer": LocalJSX.MvxUnlockPanelFooter & JSXBase.HTMLAttributes<HTMLMvxUnlockPanelFooterElement>;
            "mvx-unlock-panel-group": LocalJSX.MvxUnlockPanelGroup & JSXBase.HTMLAttributes<HTMLMvxUnlockPanelGroupElement>;
            "mvx-unlock-provider-button": LocalJSX.MvxUnlockProviderButton & JSXBase.HTMLAttributes<HTMLMvxUnlockProviderButtonElement>;
            "mvx-wallet-connect": LocalJSX.MvxWalletConnect & JSXBase.HTMLAttributes<HTMLMvxWalletConnectElement>;
            "mvx-wallet-connect-app-gallery-icon": LocalJSX.MvxWalletConnectAppGalleryIcon & JSXBase.HTMLAttributes<HTMLMvxWalletConnectAppGalleryIconElement>;
            "mvx-wallet-connect-app-store-icon": LocalJSX.MvxWalletConnectAppStoreIcon & JSXBase.HTMLAttributes<HTMLMvxWalletConnectAppStoreIconElement>;
            "mvx-wallet-connect-download": LocalJSX.MvxWalletConnectDownload & JSXBase.HTMLAttributes<HTMLMvxWalletConnectDownloadElement>;
            "mvx-wallet-connect-google-play-icon": LocalJSX.MvxWalletConnectGooglePlayIcon & JSXBase.HTMLAttributes<HTMLMvxWalletConnectGooglePlayIconElement>;
            "mvx-wallet-connect-scan": LocalJSX.MvxWalletConnectScan & JSXBase.HTMLAttributes<HTMLMvxWalletConnectScanElement>;
            "mvx-wallet-provider-icon": LocalJSX.MvxWalletProviderIcon & JSXBase.HTMLAttributes<HTMLMvxWalletProviderIconElement>;
            "mvx-xalias-provider-icon": LocalJSX.MvxXaliasProviderIcon & JSXBase.HTMLAttributes<HTMLMvxXaliasProviderIconElement>;
            "mvx-xportal-download-qr-icon": LocalJSX.MvxXportalDownloadQrIcon & JSXBase.HTMLAttributes<HTMLMvxXportalDownloadQrIconElement>;
            "mvx-xportal-qr-code-preloader": LocalJSX.MvxXportalQrCodePreloader & JSXBase.HTMLAttributes<HTMLMvxXportalQrCodePreloaderElement>;
        }
    }
}
